basePath: /api/v1
definitions:
  comment.CommentCreateSchema:
    properties:
      author_id:
        type: integer
      body:
        type: string
      post_id:
        type: integer
    type: object
  comment.CommentListOut:
    properties:
      comments:
        description: List of comment objects
        items:
          $ref: '#/definitions/comment.CommentOutSchema'
        type: array
    type: object
  comment.CommentOut:
    properties:
      comment:
        $ref: '#/definitions/comment.CommentOutSchema'
    type: object
  comment.CommentOutSchema:
    properties:
      author_id:
        type: integer
      author_name:
        type: string
      body:
        type: string
      downvotes:
        type: integer
      id:
        type: integer
      post_id:
        type: integer
      published_at:
        type: string
      upvotes:
        type: integer
    type: object
  comment.CommentUpdateSchema:
    properties:
      body:
        type: string
    type: object
  post.PostImageOut:
    properties:
      image:
        $ref: '#/definitions/post.PostImageOutSchema'
    type: object
  post.PostImageOutSchema:
    properties:
      id:
        type: integer
      image_type:
        type: string
      post_id:
        type: integer
      url:
        type: string
    type: object
  post.PostListOut:
    properties:
      posts:
        items:
          $ref: '#/definitions/post.PostOutSchema'
        type: array
    type: object
  post.PostOut:
    properties:
      post:
        $ref: '#/definitions/post.PostOutSchema'
    type: object
  post.PostOutSchema:
    properties:
      author_id:
        type: integer
      author_name:
        type: string
      body:
        type: string
      id:
        type: integer
      is_draft:
        type: boolean
      published_at:
        type: string
      title:
        type: string
      views:
        type: integer
    type: object
  post.PostSchema:
    properties:
      author_id:
        type: integer
      body:
        type: string
      status:
        type: string
      title:
        type: string
    type: object
  post.PostUpdateSchema:
    properties:
      body:
        type: string
      is_draft:
        type: boolean
      title:
        type: string
    type: object
  user.LoginOut:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/user.UserOutSchema'
    type: object
  user.UserLoginSchema:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  user.UserOut:
    properties:
      user:
        $ref: '#/definitions/user.UserOutSchema'
    type: object
  user.UserOutSchema:
    properties:
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      phone:
        type: string
    type: object
  user.UserPasswordUpdateSchema:
    properties:
      old_password:
        type: string
      password:
        type: string
    required:
    - old_password
    - password
    type: object
  user.UserProfileUpdateSchema:
    properties:
      first_name:
        type: string
      last_name:
        type: string
      phone:
        type: string
    type: object
  user.UserSchema:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      phone:
        type: string
    type: object
  user.UsersOut:
    properties:
      users:
        items:
          $ref: '#/definitions/user.UserOutSchema'
        type: array
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a simple API for a blogging platform
  title: UnGo API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user
      parameters:
      - description: User object that needs to be authenticated
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.UserLoginSchema'
      produces:
      - application/json
      responses:
        "200":
          description: '{"data": LoginOut}'
          schema:
            additionalProperties:
              $ref: '#/definitions/user.LoginOut'
            type: object
        "401":
          description: '{"data": {}, "error": "Invalid password"}'
          schema:
            additionalProperties: true
            type: object
      summary: Authenticate a user
      tags:
      - auth
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: User object that needs to be created
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.UserSchema'
      produces:
      - application/json
      responses:
        "200":
          description: '{"data": UserOut}'
          schema:
            additionalProperties:
              $ref: '#/definitions/user.UserOut'
            type: object
      summary: Create a new user
      tags:
      - auth
  /comments:
    get:
      consumes:
      - application/json
      description: List all comments or comments by a specific post ID
      parameters:
      - description: Post ID
        in: query
        name: post_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"status": "success", "data": CommentListOut}'
          schema:
            additionalProperties:
              $ref: '#/definitions/comment.CommentListOut'
            type: object
      security:
      - BearerAuth: []
      summary: List all comments or comments by a specific post ID
      tags:
      - comments
    post:
      consumes:
      - application/json
      description: Create a new comment
      parameters:
      - description: Comment object that needs to be created
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/comment.CommentCreateSchema'
      produces:
      - application/json
      responses:
        "200":
          description: '{"status": "success", "data": CommentOut}'
          schema:
            additionalProperties:
              $ref: '#/definitions/comment.CommentOut'
            type: object
        "400":
          description: '{"status": "success", "data": CommentOut, "message": "Author
            ID ''%d'' does not point to an existing resource."}'
          schema:
            additionalProperties:
              $ref: '#/definitions/comment.CommentOut'
            type: object
      security:
      - BearerAuth: []
      summary: Create a new comment
      tags:
      - comments
  /comments/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a comment by ID
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"data": {}, "message": "Comment deleted successfully"}'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: '{"data": {}, "message": "Comment with comment id ''{id}''
            does not exist."}'
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete a comment by ID
      tags:
      - comments
    get:
      consumes:
      - application/json
      description: Get a comment by ID
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"data": CommentOut}'
          schema:
            additionalProperties:
              $ref: '#/definitions/comment.CommentOut'
            type: object
        "404":
          description: '{"data": {}, "message": "Comment with comment id ''{id}''
            does not exist."}'
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get a comment by ID
      tags:
      - comments
    put:
      consumes:
      - application/json
      description: Update a comment by ID
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: string
      - description: Comment object that needs to be updated
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/comment.CommentUpdateSchema'
      produces:
      - application/json
      responses:
        "200":
          description: '{"data": CommentOut}'
          schema:
            additionalProperties:
              $ref: '#/definitions/comment.CommentOut'
            type: object
        "404":
          description: '{"data": {}, "message": "Comment with comment id ''{id}''
            does not exist."}'
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update a comment by ID
      tags:
      - comments
  /comments/{id}/downvote:
    put:
      consumes:
      - application/json
      description: Downvote a comment by ID
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"data": CommentOut}'
          schema:
            additionalProperties:
              $ref: '#/definitions/comment.CommentOut'
            type: object
        "404":
          description: '{"data": {}, "message": "Comment with comment id ''{id}''
            does not exist."}'
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Downvote a comment by ID
      tags:
      - comments
  /comments/{id}/upvote:
    put:
      consumes:
      - application/json
      description: Upvote a comment by ID
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"data": CommentOut}'
          schema:
            additionalProperties:
              $ref: '#/definitions/comment.CommentOut'
            type: object
        "404":
          description: '{"data": {}, "message": "Comment with comment id ''{id}''
            does not exist."}'
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Upvote a comment by ID
      tags:
      - comments
  /posts:
    get:
      consumes:
      - application/json
      description: Get all posts
      produces:
      - application/json
      responses:
        "200":
          description: '{"status": "success", "data": PostListOut}'
          schema:
            additionalProperties:
              $ref: '#/definitions/post.PostListOut'
            type: object
      security:
      - BearerAuth: []
      summary: Get all posts
      tags:
      - posts
    post:
      consumes:
      - application/json
      description: Create a new post
      parameters:
      - description: Post object that needs to be created
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/post.PostSchema'
      produces:
      - application/json
      responses:
        "200":
          description: '{"status": "success", "data": PostOut}'
          schema:
            additionalProperties:
              $ref: '#/definitions/post.PostOut'
            type: object
      security:
      - BearerAuth: []
      summary: Create a new post
      tags:
      - posts
  /posts/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a post by ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"status": "success", "data": {}, "message": "Post deleted
            successfully"}'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: '{"status": "failure", "data": {}, "message": "Post with post
            id ''{id}'' does not exist."}'
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete a post by ID
      tags:
      - posts
    get:
      consumes:
      - application/json
      description: Get a post by ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"status": "success", "data": PostOut}'
          schema:
            additionalProperties:
              $ref: '#/definitions/post.PostOut'
            type: object
        "404":
          description: '{"status": "failure", "data": {}, "message": "Post with post
            id ''{id}'' does not exist."}'
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get a post by ID
      tags:
      - posts
    put:
      consumes:
      - application/json
      description: Update a post by ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      - description: Post object that needs to be updated
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/post.PostUpdateSchema'
      produces:
      - application/json
      responses:
        "200":
          description: '{"status": "success", "data": PostOut}'
          schema:
            additionalProperties:
              $ref: '#/definitions/post.PostOut'
            type: object
        "404":
          description: '{"status": "failure", "data": {}, "message": "Post with post
            id ''{id}'' does not exist."}'
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update a post by ID
      tags:
      - posts
  /posts/{id}/images:
    get:
      description: Get images linked to a post by ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"status": "success", "data": PostImageListOut, "message":
            "Images retrieved successfully."}'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: '{"status": "failure", "data": {}, "message": "Post with post
            id ''{id}'' does not exist."}'
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get images linked to a post by ID
      tags:
      - posts
    post:
      consumes:
      - multipart/form-data
      description: Upload an image for a post by ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      - description: Image to be uploaded
        in: formData
        name: image
        required: true
        type: file
      - description: Type of image (preview or attachment)
        in: formData
        name: image_type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"status": "success", "data": PostImageOut, "message": "Image
            uploaded successfully."}'
          schema:
            $ref: '#/definitions/post.PostImageOut'
        "400":
          description: '{"status": "failure", "message": "something went wrong while
            processing your request"}'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: '{"status": "failure", "data": {}, "message": "Post with post
            id ''{id}'' does not exist."}'
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Upload an image for a post by ID
      tags:
      - posts
  /posts/{id}/images/{image_id}:
    delete:
      description: Delete a specific image linked to a post by ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      - description: Image ID
        in: path
        name: image_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"status": "success", "data": {}, "message": "Image deleted
            successfully."}'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: '{"status": "failure", "data": {}, "message": "Image with image
            id ''{image_id}'' does not exist."}'
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete a specific image linked to a post by ID
      tags:
      - posts
    get:
      description: Get a specific image linked to a post by ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      - description: Image ID
        in: path
        name: image_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"status": "success", "data": PostImageOut, "message": "Image
            retrieved successfully."}'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: '{"status": "failure", "data": {}, "message": "Image with image
            id ''{image_id}'' does not exist."}'
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get a specific image linked to a post by ID
      tags:
      - posts
  /posts/{id}/views:
    put:
      consumes:
      - application/json
      description: Increment the views of a post by ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"status": "success", "data": PostOut, "message": "Views for
            post with post id ''{id}'' have been updated successfully."}'
          schema:
            additionalProperties:
              $ref: '#/definitions/post.PostOut'
            type: object
        "400":
          description: '{"status": "failure", "message": "something went wrong while
            processing your request"}'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: '{"status": "failure", "data": {}, "message": "Post with post
            id ''{id}'' does not exist."}'
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update the views of a post by ID
      tags:
      - posts
  /users:
    get:
      description: Get all users
      produces:
      - application/json
      responses:
        "200":
          description: '{"data": UsersOut}'
          schema:
            additionalProperties:
              $ref: '#/definitions/user.UsersOut'
            type: object
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - users
  /users/{id}:
    delete:
      description: Delete a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"data": {}, "message": "User deleted successfully"}'
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete a user by ID
      tags:
      - users
    get:
      description: Get a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{"data": UserOut}'
          schema:
            additionalProperties:
              $ref: '#/definitions/user.UserOut'
            type: object
      security:
      - BearerAuth: []
      summary: Get a user by ID
      tags:
      - users
  /users/{id}/password:
    put:
      consumes:
      - application/json
      description: Update a user's password by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User password object that needs to be updated
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.UserPasswordUpdateSchema'
      produces:
      - application/json
      responses:
        "200":
          description: '{"data": UserOut}'
          schema:
            additionalProperties:
              $ref: '#/definitions/user.UserOut'
            type: object
      security:
      - BearerAuth: []
      summary: Update a user's password by ID
      tags:
      - users
  /users/{id}/profile:
    put:
      consumes:
      - application/json
      description: Update a user's profile by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User profile object that needs to be updated
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.UserProfileUpdateSchema'
      produces:
      - application/json
      responses:
        "200":
          description: '{"data": UserOut}'
          schema:
            additionalProperties:
              $ref: '#/definitions/user.UserOut'
            type: object
      security:
      - BearerAuth: []
      summary: Update a user's profile by ID
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: |-
      "Bearer token for API authorization"
      Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
